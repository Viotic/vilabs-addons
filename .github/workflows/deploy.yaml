---
name: Deploy

# yamllint disable-line rule:truthy
on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  information:
    name: Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      environment: ${{ steps.release.outputs.environment }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.information.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4

      - name: üöÄ Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1
        with:
          path: "./open-webui"

      - name: ‚ÑπÔ∏è Gather version and environment
        id: release
        run: |
          sha="${{ github.sha }}"
          environment="edge"
          version="${sha:0:7}"
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
            environment="stable"
            if [[ "${{ github.event.release.prerelease }}" = "true" ]]; then
              environment="beta"
            fi
          fi

          echo "environment=${environment}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT

  deploy:
    name: üë∑ Build & Deploy ${{ matrix.architecture }}
    runs-on: ubuntu-latest
    needs: information
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4

      - name: üèó Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ‚ÑπÔ∏è Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "./open-webui/build.yaml")
          echo "from=${from}" >> $GITHUB_OUTPUT

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "platform=linux/amd64" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> $GITHUB_OUTPUT
          fi

      - name: üèó Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          # yamllint disable rule:line-length
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.environment }}
            ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.version }}
          # yamllint enable rule:line-length
          context: open-webui
          file: open-webui/Dockerfile
          cache-from: type=gha,scope=open-webui-${{ matrix.architecture }}
          cache-to: type=gha,mode=max,scope=open-webui-${{ matrix.architecture }}
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
            BUILD_NAME=${{ needs.information.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}
