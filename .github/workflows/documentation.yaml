---
name: Documentation

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - main
      - master
  schedule:
    # Run every day at 2:00 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  update-shields:
    name: üìù Update README shields
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ÔøΩ Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: üîç Find add-ons
        id: addons
        run: |
          echo "addons=open-webui" >> $GITHUB_OUTPUT

      - name: üìù Update version shields
        run: |
          addons="open-webui"
          for addon in $addons; do
            if [[ -f "${addon}/config.yaml" ]]; then
              version=$(yq eval '.version' "${addon}/config.yaml")
              addon_name=$(yq eval '.name' "${addon}/config.yaml")

              # Update version shield in main README
              if [[ -f "README.md" ]]; then
                # Create shields if they don't exist
                shield_pattern="\[${addon}-version-shield\]"
                if ! grep -q "$shield_pattern" README.md; then
                  echo "<!-- Shields for ${addon} -->" >> shields_temp.md
                  echo "[${addon}-version-shield]: https://img.shields.io/badge/version-v${version}-blue.svg" >> shields_temp.md
                  echo "[${addon}-aarch64-shield]: https://img.shields.io/badge/aarch64-yes-green.svg" >> shields_temp.md
                  echo "[${addon}-amd64-shield]: https://img.shields.io/badge/amd64-yes-green.svg" >> shields_temp.md
                  echo "[${addon}-armv7-shield]: https://img.shields.io/badge/armv7-yes-green.svg" >> shields_temp.md
                  echo "[${addon}-armhf-shield]: https://img.shields.io/badge/armhf-no-red.svg" >> shields_temp.md
                  echo "" >> shields_temp.md

                  # Append to README
                  cat shields_temp.md >> README.md
                  rm shields_temp.md
                else
                  # Update existing shield
                  sed -i "s|\[${addon}-version-shield\]:.*|\[${addon}-version-shield\]: https://img.shields.io/badge/version-v${version}-blue.svg|g" README.md
                fi
              fi
            fi
          done

      - name: üìù Update architecture support
        run: |
          addons="open-webui"
          for addon in $addons; do
            if [[ -f "${addon}/config.yaml" ]]; then
              # Get supported architectures
              architectures=$(yq eval '.arch[]' "${addon}/config.yaml" | tr '\n' ' ')

              # Update architecture shields
              for arch in aarch64 amd64 armv7 armhf; do
                if echo "$architectures" | grep -q "$arch"; then
                  status="yes-green"
                else
                  status="no-red"
                fi
                sed -i "s|\[${addon}-${arch}-shield\]:.*|\[${addon}-${arch}-shield\]: https://img.shields.io/badge/${arch}-${status}.svg|g" README.md || true
              done
            fi
          done

      - name: üìù Update repository stats
        run: |
          # Add repository statistics
          addon_count=1

          # Update or add repository stats in README
          if ! grep -q "## Repository Statistics" README.md; then
            echo "" >> README.md
            echo "## Repository Statistics" >> README.md
            echo "" >> README.md
            echo "- **Total Add-ons:** ${addon_count}" >> README.md
            echo "- **Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
          else
            sed -i "s/- \*\*Total Add-ons:\*\* .*/- **Total Add-ons:** ${addon_count}/g" README.md
            sed -i "s/- \*\*Last Updated:\*\* .*/- **Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')/g" README.md
          fi

      - name: üöÄ Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            üìù Update README shields and documentation

            Automated update of version shields and repository statistics
          title: "üìù Update README shields and documentation"
          body: |
            ## What's changed

            This PR updates the README.md file with:

            - Latest version shields for all add-ons
            - Updated architecture support badges
            - Repository statistics

            ## Type of change

            - [x] Documentation update

            ## Notes

            This is an automated documentation update created by the documentation workflow.
          branch: update-documentation
          delete-branch: true
          labels: |
            documentation

  validate-docs:
    name: üîç Validate documentation
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4

      - name: üîç Check for required documentation files
        run: |
          missing_files=()

          # Check main README
          if [[ ! -f "README.md" ]]; then
            missing_files+=("README.md")
          fi

          # Check each add-on has documentation
          for addon in */; do
            if [[ -f "${addon}config.yaml" ]]; then
              if [[ ! -f "${addon}README.md" ]]; then
                missing_files+=("${addon}README.md")
              fi
              if [[ ! -f "${addon}DOCS.md" ]]; then
                missing_files+=("${addon}DOCS.md")
              fi
            fi
          done

          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "‚ùå Missing documentation files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          else
            echo "‚úÖ All required documentation files are present"
          fi

      - name: üîç Check documentation links
        run: |
          # Check for broken internal links in README files
          find . -name "README.md" -o -name "DOCS.md" | while read -r file; do
            echo "Checking links in $file"

            # Extract relative links
            links=$(grep -oE '\]\([^)]*\)' "$file" | sed 's/](\(.*\))/\1/' | grep -v '^http' | grep -v '^#' || true)

            for link in $links; do
              # Resolve relative path
              dir=$(dirname "$file")
              target="$dir/$link"

              if [[ ! -f "$target" && ! -d "$target" ]]; then
                echo "‚ùå Broken link in $file: $link (resolves to $target)"
              fi
            done
          done
